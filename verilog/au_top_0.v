/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_1 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_2 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_ctr_value;
  counter_3 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  wire [(1'h1+0)-1:0] M_buttoncond_out;
  reg [(1'h1+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<1'h1;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_4 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(1'h1+0)-1:0] M_buttondetector_out;
  reg [(1'h1+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<1'h1;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_5 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_5 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [4-1:0] M_romtest_value;
  reg [3-1:0] M_romtest_address;
  result_ROM_7 romtest (
    .address(M_romtest_address),
    .value(M_romtest_value)
  );
  
  wire [4-1:0] M_fsmchecker_casenumber;
  wire [3-1:0] M_fsmchecker_out_component;
  wire [16-1:0] M_fsmchecker_out_result;
  wire [3-1:0] M_fsmchecker_zvn;
  wire [7-1:0] M_fsmchecker_overflow;
  reg [1-1:0] M_fsmchecker_buttons;
  reg [1-1:0] M_fsmchecker_achange;
  reg [16-1:0] M_fsmchecker_manual;
  reg [1-1:0] M_fsmchecker_switch;
  reg [6-1:0] M_fsmchecker_alufnvalue;
  fsm_test_cases_8 fsmchecker (
    .clk(clk),
    .rst(rst),
    .buttons(M_fsmchecker_buttons),
    .achange(M_fsmchecker_achange),
    .manual(M_fsmchecker_manual),
    .switch(M_fsmchecker_switch),
    .alufnvalue(M_fsmchecker_alufnvalue),
    .casenumber(M_fsmchecker_casenumber),
    .out_component(M_fsmchecker_out_component),
    .out_result(M_fsmchecker_out_result),
    .zvn(M_fsmchecker_zvn),
    .overflow(M_fsmchecker_overflow)
  );
  
  wire [1-1:0] M_anskey_result;
  wire [7-1:0] M_anskey_overflow;
  reg [4-1:0] M_anskey_num;
  reg [16-1:0] M_anskey_aluval;
  reg [6-1:0] M_anskey_alufnval;
  reg [1-1:0] M_anskey_vval;
  answer_key_9 anskey (
    .num(M_anskey_num),
    .aluval(M_anskey_aluval),
    .alufnval(M_anskey_alufnval),
    .vval(M_anskey_vval),
    .result(M_anskey_result),
    .overflow(M_anskey_overflow)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = M_dec_ctr_digits;
    led = 8'h00;
    io_seg = 8'hff;
    io_sel = 4'he;
    M_buttoncond_in = io_button[0+0-:1];
    M_buttondetector_in = M_buttoncond_out;
    M_fsmchecker_buttons = M_buttondetector_out;
    M_fsmchecker_manual[8+7-:8] = io_dip[8+7-:8];
    M_fsmchecker_manual[0+7-:8] = io_dip[0+7-:8];
    M_fsmchecker_alufnvalue = io_dip[16+0+5-:6];
    M_fsmchecker_achange = io_dip[16+6+0-:1];
    M_fsmchecker_switch = io_dip[16+7+0-:1];
    M_romtest_address = M_fsmchecker_out_component;
    M_anskey_num = M_fsmchecker_casenumber;
    M_anskey_aluval = M_fsmchecker_out_result;
    M_anskey_alufnval = io_dip[16+0+5-:6];
    M_anskey_vval = M_fsmchecker_zvn[1+0-:1];
    io_led[16+7+0-:1] = M_anskey_result;
    io_led[16+4+2-:3] = M_fsmchecker_zvn;
    io_led[16+0+3-:4] = M_romtest_value;
    io_led[8+7-:8] = M_fsmchecker_out_result[8+7-:8];
    io_led[0+7-:8] = M_fsmchecker_out_result[0+7-:8];
    io_seg = M_fsmchecker_overflow;
    io_seg = M_anskey_overflow;
  end
endmodule
